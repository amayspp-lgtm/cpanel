<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel Creator - Public/Private</title>
    <style>
        /* --- CSS DI SINI (SAMA SEPERTI SEBELUMNYA) --- */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap'); /* For H1 */

        :root {
            --bg-color: #0d1117; /* Deep dark blue-black */
            --container-bg: #161b22; /* Slightly lighter container */
            --border-color: #30363d; /* Dark border */
            --text-color: #c9d1d9; /* Light off-white text */
            --primary-accent: #58a6ff; /* Cyan/Light Blue for primary elements */
            --secondary-accent: #a464f4; /* Purple for secondary accents */
            --success-color: #3fb950; /* Green for success */
            --error-color: #f85149; /* Red for errors */
            --input-bg: #11141a; /* Even darker for inputs */
            --placeholder-color: #8b949e;
            --shadow-color: rgba(0, 0, 0, 0.7);
            --gradient-1: linear-gradient(90deg, #61dafb 0%, #a464f4 100%); /* Adjusted gradient */
            --gradient-2: linear-gradient(90deg, #a464f4 0%, #61dafb 100%); /* Adjusted gradient */
            --neon-glow: 0 0 5px var(--primary-accent), 0 0 10px var(--primary-accent), 0 0 20px var(--primary-accent);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            overflow-y: auto; 
            overflow-x: hidden;
            position: relative;
        }

        .background-particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden; 
            z-index: 0;
        }
        .particle {
            position: absolute;
            background: var(--primary-accent);
            opacity: 0.2;
            border-radius: 50%;
            animation: moveParticle 15s infinite ease-in-out;
        }
        .particle:nth-child(2) { background: var(--secondary-accent); animation-duration: 20s; left: 30%; top: 60%; width: 80px; height: 80px; animation-delay: 2s; }
        .particle:nth-child(3) { animation-duration: 18s; left: 70%; top: 20%; width: 50px; height: 50px; animation-delay: 0s; }
        .particle:nth-child(4) { animation-duration: 25s; left: 10%; top: 10%; width: 100px; height: 100px; animation-delay: 5s; }
        .particle:nth-child(5) { animation-duration: 22s; left: 5%; top: 40%; width: 55px; height: 55px; animation-delay: 8s; }
        @keyframes moveParticle {
            0% { transform: translate(0, 0) scale(1); opacity: 0.2; }
            25% { transform: translate(20vw, 30vh) scale(1.2); opacity: 0.3; }
            50% { transform: translate(50vw, -10vh) scale(0.8); opacity: 0.1; }
            75% { transform: translate(80vw, 40vh) scale(1.1); opacity: 0.25; }
            100% { transform: translate(0, 0) scale(1); opacity: 0.2; }
        }

        .container {
            background-color: var(--container-bg);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 15px 40px var(--shadow-color);
            border: 1px solid var(--border-color);
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
            position: relative;
            z-index: 10;
            opacity: 0;
            transform: translateY(20px) scale(0.95);
            animation: containerEntry 0.6s ease-out forwards 0.3s;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px auto;
        }
        @keyframes containerEntry {
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        h1 {
            font-family: 'Orbitron', sans-serif;
            text-align: center;
            color: var(--primary-accent);
            margin-bottom: 35px;
            font-size: 2.5em;
            font-weight: 700;
            letter-spacing: 0.05em;
            text-shadow: var(--neon-glow); /* Apply neon glow */
        }
        
        .section-title {
            font-family: 'Orbitron', sans-serif;
            color: var(--secondary-accent);
            font-size: 1.8em;
            text-align: center;
            margin-bottom: 30px;
            text-shadow: 0 0 8px rgba(164, 100, 244, 0.3);
        }

        .form-group {
            margin-bottom: 25px;
            position: relative;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-size: 0.9em;
            color: var(--text-color);
            font-weight: 500;
            transition: color 0.2s ease;
        }

        .input-glow-border {
            width: 100%;
            padding: 14px 18px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .input-glow-border::placeholder {
            color: var(--placeholder-color);
        }

        .input-glow-border:focus {
            border-color: var(--primary-accent);
            box-shadow: var(--neon-glow); /* Neon glow on focus */
            outline: none;
        }

        select.input-glow-border {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23e0e6f0%22%20d%3D%22M287%2069.9a14.2%2014.2%200%200%200-20.2%200L146.2%20190.4%2025.6%2069.9a14.2%2014.2%200%200%00-20.2%2020.2l130.6%20130.6a14.2%2014.2%200%200%0020.2%200L287%2090.1a14.2%2014.2%200%200%000-20.2z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 12px;
            padding-right: 35px;
        }

        /* --- Updated Button Style --- */
        .cyber-button {
            width: 100%;
            padding: 16px;
            background-image: var(--gradient-1);
            color: var(--bg-color);
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            letter-spacing: 0.05em;
            text-transform: uppercase;
        }

        .cyber-button:hover {
            background-image: var(--gradient-2);
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.4);
        }

        .cyber-button:active {
            transform: translateY(0);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .cyber-button::before {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            border: 2px solid transparent;
            border-image: var(--gradient-1) 1;
            border-image-slice: 1;
            z-index: 1;
            animation: cyberBorder 2s linear infinite;
        }

        @keyframes cyberBorder {
            0% { border-image: var(--gradient-1) 1; }
            50% { border-image: var(--gradient-2) 1; }
            100% { border-image: var(--gradient-1) 1; }
        }

        .cyber-button:disabled {
            background-image: linear-gradient(90deg, #30363d 0%, #3d444e 100%);
            color: #8b949e;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
            /* New: Disable glow when disabled */
            text-shadow: none;
        }
        .cyber-button:disabled::before {
            animation: none;
            border-image: none;
            border-color: #30363d;
        }

        /* New: Glitch effect for button text when loading */
        .cyber-button.loading span:first-child {
            animation: glitchText 0.8s infinite linear alternate-reverse;
            padding-right: 10px; /* Space for dots */
        }
        @keyframes glitchText {
            0% {
                text-shadow: 0 0 var(--primary-accent), 0 0 var(--secondary-accent);
                transform: translateX(0);
            }
            20% {
                text-shadow: 2px 0 var(--primary-accent), -2px 0 var(--secondary-accent);
                transform: translateX(-1px);
            }
            40% {
                text-shadow: -2px 0 var(--primary-accent), 2px 0 var(--secondary-accent);
                transform: translateX(1px);
            }
            60% {
                text-shadow: 3px 0 var(--primary-accent), -3px 0 var(--secondary-accent);
                transform: translateX(0);
            }
            80% {
                text-shadow: -1px 0 var(--primary-accent), 1px 0 var(--secondary-accent);
                transform: translateX(-1px);
            }
            100% {
                text-shadow: 0 0 var(--primary-accent), 0 0 var(--secondary-accent);
                transform: translateX(0);
            }
        }
        /* --- End Updated Button Style --- */


        /* --- Updated Loader/Spinner Style --- */
        .loader-dots {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
            width: 30px;
            height: 18px;
            display: none;
            position: relative; /* For the glow */
        }
        .dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--primary-accent); /* Use primary accent for dots */
            margin: 0 3px;
            animation: bounce 0.6s infinite alternate;
            box-shadow: var(--neon-glow); /* Add glow to dots */
        }
        .dot:nth-child(2) {
            animation-delay: 0.2s;
            background: var(--secondary-accent); /* Secondary accent for middle dot */
        }
        .dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes bounce {
            to { transform: translateY(-5px); }
        }
        /* --- End Updated Loader Style --- */

        /* New: Progress Bar (Optional, can be used instead of or with dots) */
        .loading-progress-bar {
            width: 0%; /* Starts at 0 */
            height: 4px;
            background-image: var(--gradient-1);
            border-radius: 2px;
            position: absolute;
            bottom: 0;
            left: 0;
            transition: width 0.5s ease-out; /* Smooth filling */
            box-shadow: var(--neon-glow);
            opacity: 0; /* Hidden by default */
        }
        .cyber-button.loading .loading-progress-bar {
            width: 100%; /* Fills up when loading */
            opacity: 1;
        }


        #responseMessage {
            margin-top: 30px;
            padding: 25px;
            border-radius: 12px;
            background-color: var(--container-bg);
            border: 1px solid var(--border-color);
            box-shadow: 0 8px 20px var(--shadow-color);
            opacity: 0;
            transform: translateY(20px);
            animation: messageEntry 0.5s ease-out forwards 0.2s;
        }
        @keyframes messageEntry {
            to { opacity: 1; transform: translateY(0); }
        }

        #responseMessage.success {
            border-color: var(--success-color);
            box-shadow: 0 8px 20px rgba(63, 185, 80, 0.2);
        }
        #responseMessage.error {
            border-color: var(--error-color);
            box-shadow: 0 8px 20px rgba(248, 81, 73, 0.2);
        }

        .result-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.5em;
            font-weight: 700;
            color: var(--success-color);
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px dashed rgba(255,255,255,0.1);
        }

        .result-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px dashed rgba(255,255,255,0.05);
        }
        .result-row:last-of-type {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        .result-row span:first-child {
            font-weight: 500;
            color: var(--placeholder-color);
            min-width: 90px;
            padding-right: 10px;
        }
        .result-row span:last-child {
            flex-grow: 1;
            text-align: right;
            color: var(--text-color);
            word-break: break-all;
            font-weight: 600;
        }
        .result-row a {
            color: var(--primary-accent) !important;
            text-decoration: none;
            transition: color 0.2s ease;
        }
        .result-row a:hover {
            color: var(--secondary-accent) !important;
            text-decoration: underline;
        }

        .result-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
        }

        .result-actions button {
            flex: 1 1 calc(50% - 10px);
            max-width: calc(50% - 5px);
            padding: 10px 12px;
            font-size: 0.8em;
            margin-top: 0;
            box-shadow: none;
            background-image: linear-gradient(90deg, #3a424e 0%, #444c56 100%);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            white-space: nowrap;
            transition: all 0.2s ease;
        }
        .result-actions button:hover {
            background-image: linear-gradient(90deg, #444c56 0%, #3a424e 100%);
            transform: translateY(-1px);
        }
        .result-actions button.login-panel-button {
            background-image: var(--gradient-1);
            color: var(--bg-color);
            border-color: transparent;
        }
        .result-actions button.login-panel-button:hover {
            background-image: var(--gradient-2);
        }

        .copy-all-button {
            width: 100%;
            margin-top: 20px;
            background-image: var(--gradient-1);
            color: var(--bg-color);
            font-size: 0.95em;
            padding: 14px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .copy-all-button:hover {
            background-image: var(--gradient-2);
            transform: translateY(-2px);
        }

        .contact-message {
            font-size: 0.8em;
            color: var(--placeholder-color);
            text-align: center;
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
        }
        .contact-message a {
            color: var(--primary-accent);
            text-decoration: none;
            font-weight: 600;
        }
        .contact-message a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="background-particles">
        <div class="particle" style="width: 60px; height: 60px; left: 10%; top: 10%;"></div>
        <div class="particle" style="width: 40px; height: 40px; left: 80%; top: 30%;"></div>
        <div class="particle" style="width: 90px; height: 90px; left: 20%; top: 80%;"></div>
        <div class="particle" style="width: 70px; height: 70px; left: 60%; top: 5%;"></div>
        <div class="particle" style="width: 55px; height: 55px; left: 5%; top: 40%;"></div>
    </div>

    <div class="container">
        <h1>CREATE PANEL</h1>
        <form id="createPanelForm">
            <div class="form-group">
                <label for="accessKey">Access Key:</label>
                <input type="password" id="accessKey" name="accessKey" placeholder="Masukkan Access Key Anda" class="input-glow-border" required>
            </div>

            <div class="form-group">
                <label for="panelType">Tipe Panel:</label>
                <select id="panelType" name="panelType" class="input-glow-border" required>
                    <option value="" disabled selected>Pilih Tipe Panel</option>
                </select>
            </div>

            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" placeholder="Contoh: user_keren2025" class="input-glow-border" required minlength="4" maxlength="16" pattern="^[a-zA-Z0-9_.-]+$" title="Hanya huruf, angka, underscore, titik, atau dash. Minimal 4, Maksimal 16 karakter.">
            </div>

            <div class="form-group">
                <label for="hostingPackage">Paket Hosting:</label>
                <select id="hostingPackage" name="hostingPackage" class="input-glow-border" required>
                    <option value="" disabled selected>Pilih Paket</option>
                    <option value="unlimited">Unlimited</option>
                    <option value="10gb">10 GB</option>
                    <option value="9gb">9 GB</option>
                    <option value="8gb">8 GB</option>
                    <option value="7gb">7 GB</option>
                    <option value="6gb">6 GB</option>
                    <option value="5gb">5 GB</option>
                    <option value="4gb">4 GB</option>
                    <option value="3gb">3 GB</option>
                    <option value="2gb">2 GB</option>
                    <option value="1gb">1 GB</option>
                </select>
            </div>

            <button type="submit" id="createButton" class="cyber-button">
                <span>Create Panel</span> <span class="loader-dots" id="loadingSpinner">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </span>
                <div class="loading-progress-bar"></div> </button>
        </form>

        <div id="responseMessage" class=""></div>

    </div>

    <div id="toast-notification-container"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- KONFIGURASI PENTING UNTUK CLIENT-SIDE ---
            const YOUR_VALIDATION_API_ENDPOINT = '/api/validate-access-key'; 
            const YOUR_CREATE_PANEL_API_ENDPOINT = '/api/create-panel';
            
            const IS_PUBLIC_PANEL_ENABLED = true; // Fitur ini diatur langsung di frontend
            const IS_PRIVATE_PANEL_ENABLED = true; // Fitur ini diatur langsung di frontend

            const PACKAGES = {
                "1gb": { ram: 1024, disk: 1024, cpu: 100, name: "1 GB" },
                "2gb": { ram: 2048, disk: 2048, cpu: 100, name: "2 GB" },
                "3gb": { ram: 3072, disk: 3072, cpu: 100, name: "3 GB" },
                "4gb": { ram: 4096, disk: 4096, cpu: 100, name: "4 GB" },
                "5gb": { ram: 5120, disk: 5120, cpu: 100, name: "5 GB" },
                "6gb": { ram: 6144, disk: 6144, cpu: 100, name: "6 GB" },
                "7gb": { ram: 7168, disk: 7168, cpu: 100, name: "7 GB" },
                "8gb": { ram: 8192, disk: 8192, cpu: 150, name: "8 GB" },
                "9gb": { ram: 9216, disk: 9216, cpu: 150, name: "9 GB" },
                "10gb": { ram: 10240, disk: 10240, cpu: 200, name: "10 GB" },
                "unlimited": { ram: 0, disk: 0, cpu: 0, name: "Unlimited" }
            };
            // --- AKHIR KONFIGURASI CLIENT-SIDE ---


            const createPanelForm = document.getElementById('createPanelForm');
            const createButton = document.getElementById('createButton');
            const createButtonText = createButton.querySelector('span:first-child'); // Dapatkan elemen span untuk teks
            const loadingSpinner = document.getElementById('loadingSpinner');
            const progressBar = createButton.querySelector('.loading-progress-bar'); // Dapatkan elemen progress bar
            const responseMessageDiv = document.getElementById('responseMessage');
            const toastContainer = document.getElementById('toast-notification-container');
            const panelTypeSelect = document.getElementById('panelType');

            // --- Fungsi Utility ---
            function showMainMessage(type, messageHTML) {
                responseMessageDiv.className = type; 
                responseMessageDiv.innerHTML = messageHTML;
                responseMessageDiv.style.opacity = 0; 
                responseMessageDiv.style.transform = 'translateY(20px)'; 
                void responseMessageDiv.offsetWidth; 
                responseMessageDiv.style.opacity = 1; 
                responseMessageDiv.style.transform = 'translateY(0)'; 
            }

            function showToast(type, message, duration = 3000) {
                const toast = document.createElement('div');
                toast.classList.add('toast-notification', type); 

                let icon = '';
                if (type === 'success') icon = '<i class="fas fa-check-circle"></i>';
                else if (type === 'error') icon = '<i class="fas fa-times-circle"></i>';
                else if (type === 'info') icon = '<i class="fas fa-info-circle"></i>';

                toast.innerHTML = `
                    <span class="icon">${icon}</span>
                    <span class="message">${message}</span>
                    <button class="close-btn">&times;</button>
                `;

                toast.querySelector('.close-btn').addEventListener('click', () => {
                    toast.remove();
                });

                toastContainer.appendChild(toast);

                setTimeout(() => {
                    toast.style.animation = 'fadeOut 0.5s ease-in forwards';
                    toast.addEventListener('animationend', () => {
                        toast.remove();
                    });
                }, duration);
            }

            function populatePanelTypeDropdown() {
                panelTypeSelect.innerHTML = '<option value="" disabled selected>Pilih Tipe Panel</option>';
                
                let optionsAdded = 0;
                if (IS_PUBLIC_PANEL_ENABLED) {
                    const publicOption = document.createElement('option');
                    publicOption.value = 'public';
                    publicOption.textContent = 'Public Panel';
                    panelTypeSelect.appendChild(publicOption);
                    optionsAdded++;
                }

                if (IS_PRIVATE_PANEL_ENABLED) {
                    const privateOption = document.createElement('option');
                    privateOption.value = 'private';
                    privateOption.textContent = 'Private Panel';
                    panelTypeSelect.appendChild(privateOption);
                    optionsAdded++;
                }

                if (optionsAdded === 0) {
                    const noOption = document.createElement('option');
                    noOption.value = '';
                    noOption.textContent = 'Tidak ada panel tersedia';
                    noOption.disabled = true;
                    panelTypeSelect.appendChild(noOption);
                    panelTypeSelect.disabled = true;
                } else if (optionsAdded === 1) {
                    panelTypeSelect.selectedIndex = 1;
                }
            }
            // --- End Fungsi Utility ---

            populatePanelTypeDropdown();

            createPanelForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                // --- Mulai Efek Loading ---
                createButton.disabled = true;
                createButton.classList.add('loading'); // Tambahkan kelas loading
                createButtonText.textContent = 'MEMBUAT PANEL'; // <--- Perubahan di sini
                loadingSpinner.style.display = 'flex'; // Tampilkan spinner
                progressBar.style.width = '100%'; // Mulai animasi progress bar
                progressBar.style.opacity = '1';
                // --- Akhir Efek Loading ---

                responseMessageDiv.innerHTML = ''; 
                responseMessageDiv.className = ''; 

                const accessKey = document.getElementById('accessKey').value;
                const selectedPanelType = panelTypeSelect.value;
                const username = document.getElementById('username').value;
                const hostingPackage = document.getElementById('hostingPackage').value;

                // --- Validasi Access Key melalui API Serverless Function ---
                try {
                    const validateUrl = `${YOUR_VALIDATION_API_ENDPOINT}?accessKey=${encodeURIComponent(accessKey)}`;
                    const validationResponse = await fetch(validateUrl, { method: 'GET' });
                    const validationData = await validationResponse.json();

                    if (!validationData.isValid) {
                        showToast('error', validationData.message || 'Access Key Salah!');
                        return; // Hentikan eksekusi jika tidak valid
                    }
                } catch (error) {
                    console.error('Error saat validasi Access Key:', error);
                    showToast('error', 'Terjadi masalah saat memvalidasi Access Key. Coba lagi nanti.');
                    return; // Hentikan eksekusi jika error
                }
                // --- Akhir Validasi Access Key ---

                if (!selectedPanelType) {
                    showToast('error', 'Silakan pilih tipe panel (Public/Private)!');
                    return;
                }

                if (!username || !hostingPackage) {
                    showToast('error', 'Username dan Paket Hosting harus diisi!');
                    return;
                }

                const usernameInput = document.getElementById('username');
                if (!usernameInput.checkValidity()) {
                    showToast('error', `Username tidak valid: ${usernameInput.title}`);
                    return;
                }

                const selectedPackage = PACKAGES[hostingPackage];
                if (!selectedPackage) {
                    showToast('error', 'Pilih paket hosting yang valid.');
                    return;
                }

                const { ram, disk, cpu } = selectedPackage;
                
                // --- MEMANGGIL SERVERLESS FUNCTION UNTUK MEMBUAT PANEL ---
                const requestParams = new URLSearchParams({
                    username: username,
                    ram: ram,
                    disk: disk,
                    cpu: cpu,
                    hostingPackage: hostingPackage, 
                    panelType: selectedPanelType, 
                }).toString();

                const finalRequestUrl = `${YOUR_CREATE_PANEL_API_ENDPOINT}?${requestParams}`;

                try {
                    const response = await fetch(finalRequestUrl, {
                        method: 'GET',
                    });

                    const data = await response.json();

                    if (response.ok && data.status) {
                        const result = data.result;
                        const panelDomainUrl = result.domain; 

                        const fullTextToCopy = `
==============================
   DETAIL AKUN PANEL ANDA   
==============================
Username: ${result.username}
Password: ${result.password}
Paket: ${selectedPackage.name}
Tipe Panel: ${selectedPanelType.toUpperCase()}
ID User: ${result.id_user}
Server ID: ${result.id_server}
Domain: ${panelDomainUrl}
==============================
`.trim();

                        const successMessageHTML = `
                            <div class="result-title">Panel Berhasil Dibuat!</div>
                            <div class="result-row"><span>Username:</span> <span id="copyUsernameValue">${result.username}</span></div>
                            <div class="result-row"><span>Password:</span> <span id="copyPasswordValue">${result.password}</span></div>
                            <div class="result-row"><span>Paket:</span> <span>${selectedPackage.name}</span></div>
                            <div class="result-row"><span>Tipe Panel:</span> <span>${selectedPanelType.toUpperCase()}</span></div>
                            <div class="result-row"><span>ID User:</span> <span>${result.id_user}</span></div>
                            <div class="result-row"><span>Server ID:</span> <span>${result.id_server}</span></div>
                            <div class="result-row"><span>Domain:</span> <span id="copyDomainValue"><a href="${panelDomainUrl}" target="_blank">${result.domain}</a></span></div>
                            
                            <div class="result-actions">
                                <button class="copy-button" data-copy-target="copyUsernameValue">Copy Username</button>
                                <button class="copy-button" data-copy-target="copyPasswordValue">Copy Password</button>
                                <button class="copy-button" data-copy-target="copyDomainValue">Copy Domain</button>
                                <button class="login-panel-button" onclick="window.open('${panelDomainUrl}', '_blank')">Login Panel</button>
                                <button class="copy-all-button" data-copy-value="${fullTextToCopy}">Copy All Details</button>
                            </div>
                            <p class="contact-message">
                                Jika tidak bisa login, silakan hubungi <a href="#">Admin</a>
                            </p>
                        `;
                        showMainMessage('success', successMessageHTML); 
                        createPanelForm.reset(); 
                        showToast('success', 'Panel berhasil dibuat!'); 

                    } else {
                        const errorMessage = data.message || 'Terjadi kesalahan saat membuat panel.';
                        showMainMessage('error', `<b>Gagal membuat server!</b><br>Pesan: ${errorMessage}`); 
                        showToast('error', 'Gagal membuat panel!'); 
                    }
                } catch (error) {
                    console.error('Error saat menghubungi Serverless Function Create Panel:', error);
                    showMainMessage('error', `Terjadi kesalahan jaringan atau server tidak merespons: ${error.message}.`); 
                    showToast('error', 'Kesalahan koneksi Serverless API (Create Panel)!'); 
                } finally {
                    // --- Hentikan Efek Loading ---
                    createButton.disabled = false;
                    createButton.classList.remove('loading');
                    createButtonText.textContent = 'CREATE PANEL'; // Kembalikan teks tombol
                    loadingSpinner.style.display = 'none';
                    progressBar.style.width = '0%'; // Reset progress bar
                    progressBar.style.opacity = '0';
                    // --- Akhir Hentikan Efek Loading ---
                }
            });

            responseMessageDiv.addEventListener('click', async (event) => {
                if (event.target.classList.contains('copy-button')) {
                    const targetId = event.target.dataset.copyTarget;
                    const textToCopy = document.getElementById(targetId).textContent;
                    
                    if (textToCopy) {
                        try {
                            await navigator.clipboard.writeText(textToCopy);
                            showToast('info', `Disalin: ${textToCopy.substring(0, Math.min(25, textToCopy.length))}...`); 
                            event.target.textContent = 'Copied!';
                            setTimeout(() => {
                                if (targetId === 'copyUsernameValue') event.target.textContent = 'Copy Username';
                                else if (targetId === 'copyPasswordValue') event.target.textContent = 'Copy Password';
                                else if (targetId === 'copyDomainValue') event.target.textContent = 'Copy Domain';
                            }, 1500);
                        } catch (err) {
                            console.error('Failed to copy text:', err);
                            showToast('error', 'Gagal menyalin!');
                        }
                    }
                } else if (event.target.classList.contains('copy-all-button')) { 
                    const textToCopy = event.target.dataset.copyValue;
                     if (textToCopy) {
                        try {
                            await navigator.clipboard.writeText(textToCopy);
                            showToast('info', 'Semua detail berhasil disalin!'); 
                            event.target.textContent = 'All Copied!';
                            setTimeout(() => {
                                event.target.textContent = 'Copy All Details';
                            }, 1500);
                        } catch (err) {
                            console.error('Failed to copy all text:', err);
                            showToast('error', 'Gagal menyalin semua!');
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>